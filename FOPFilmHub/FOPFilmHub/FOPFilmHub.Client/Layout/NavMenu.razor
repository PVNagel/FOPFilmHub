@using System.Security.Claims
@implements IDisposable

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudNavMenu>
    <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
    <AuthorizeView>
        <Authorized>
            <MudNavGroup Title="@context.User.Identity?.Name" Icon="@Icons.Material.Filled.Person" Expanded="false">
                <MudNavLink Href="/profile" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person">Profile</MudNavLink>
                <MudNavLink Href="/top10" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Stars">Top 10</MudNavLink>
                <MudNavLink Href="/reviews" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.RateReview">Reviews</MudNavLink>
                <MudNavLink Href="/watchlist" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.List">Watchlist</MudNavLink>
                <MudNavLink Href="/watched" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Checklist">Watched</MudNavLink>
            </MudNavGroup>

            <MudNavLink Href="/users" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Groups">Users</MudNavLink>
            <MudNavLink Href="/films" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Movie">Films</MudNavLink>
            <MudNavLink Href="/fopwatchlist" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.List">FOP Watchlist</MudNavLink>
            <MudNavLink Href="/Account/Manage" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.ManageAccounts">Account</MudNavLink>
            <form action="Account/Logout" method="post">
                <AntiforgeryToken />
                <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                <button type="submit" class="mud-nav-link mud-ripple">
                    <MudIcon Icon="@Icons.Material.Filled.Logout" Color="Color.Info" Class="mr-3"></MudIcon> Logout
                </button>
            </form>
        </Authorized>
        <NotAuthorized>
            <MudNavLink Href="/film/877817" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Movie">Wolfs</MudNavLink>
            <MudNavLink Href="/film/671" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Movie">HP</MudNavLink>
            <MudNavLink Href="/film/120" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Movie">LOTR</MudNavLink>
            <MudNavLink Href="/person/109" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person">Actor</MudNavLink>
            <MudNavLink Href="Account/Register" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person">Register</MudNavLink>
            <MudNavLink Href="Account/Login" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Login">Login</MudNavLink>
        </NotAuthorized>
    </AuthorizeView>
</MudNavMenu>

@code {
    private string? currentUrl;
    private UserInfo? user;

    protected override async Task OnInitializedAsync()
    {
        // Fetch current URL for the logout redirect
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;

        // Fetch the user authentication state
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var claimsPrincipal = authState.User;

        if (claimsPrincipal.Identity != null && claimsPrincipal.Identity.IsAuthenticated)
        {
            // You can use claims or other methods to fetch user information
            user = new UserInfo
                {
                    UserId = claimsPrincipal.FindFirst(c => c.Type == "sub")?.Value ?? "", // Replace "sub" with your claim type
                    UserName = claimsPrincipal.Identity.Name ?? "Unknown",
                    Email = claimsPrincipal.FindFirst(c => c.Type == ClaimTypes.Email)?.Value ?? "Unknown"
                };
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
