@page "/profile"
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudPaper>
    <MudText Typo="Typo.h5">User Information</MudText>
    <MudDivider />

    <MudAvatar>
        @if (avatarImage != null)
        {
            <MudImage Src="@avatarImage"/>
        }
        else{
            <MudAvatar Color="Color.Primary">M</MudAvatar>
        }
    </MudAvatar>

    <MudFileUpload T="IBrowserFile" Accept=".png, .jpg" FilesChanged="UploadFile" MaximumFileCount="100">
        <ActivatorContent>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.CloudUpload">
                Only image files
            </MudButton>
        </ActivatorContent>
    </MudFileUpload>

    @if (user != null)
    {
        <MudText Typo="Typo.body1">Username: @user.Identity.Name</MudText>
        <MudText Typo="Typo.body1">Email: @user.FindFirst(c => c.Type == ClaimTypes.Email)?.Value</MudText>
    }
    else
    {
        <MudText Typo="Typo.body1">Loading...</MudText>
    }
</MudPaper>

@code {
    private ClaimsPrincipal user;
    private string avatarImage; // To store the Base64 string of the uploaded image

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
    }

    private async Task UploadFile(IBrowserFile file)
    {
        // Ensure that the file is not null and is a valid image
        if (file != null && file.Size > 0)
        {
            // Read the file as a byte array
            var buffer = new byte[file.Size];
            using (var stream = file.OpenReadStream(maxAllowedSize: 1024 * 1024)) // 1 MB limit
            {
                await stream.ReadAsync(buffer);
            }

            // Convert the byte array to a Base64 string
            avatarImage = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
        }
    }
}