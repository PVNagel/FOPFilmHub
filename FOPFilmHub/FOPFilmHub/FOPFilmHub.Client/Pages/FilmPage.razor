@page "/film/{filmId:int}"
@using FOPFilmHub.Client.Services

@inject IFilmClientService FilmClientService
@inject NavigationManager NavigationManager

@if (film == null)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" Class="my-4" />
}
else
{
    <MudCard>
        <div style="background-image: url('@($"https://image.tmdb.org/t/p/original/{film.BackdropPath}")');
         background-size: cover;
         background-position: top center; /* Focus on the top of the image */
         min-height: 400px; /* Increased minimum height */
         max-height: 500px; /* Optional: Prevent excessive stretching */
         position: relative;">
        </div>


        <div style="display: flex; padding: 16px;">
            <MudCardMedia Image="@($"https://image.tmdb.org/t/p/original/{film.PosterPath}")"
                          Alt="@film.Title"
                          Class="mud-card-media-cover"
                          Style="width: 300px; height: 450px; object-fit: cover; margin-right: 16px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);" />

            <MudCardContent Style="flex: 1;">
                <h2 class="mb-3"><strong>@film.Title</strong></h2>
                <p><strong>Synopsis:</strong> @film.Overview</p>
                <p></p>
                <p><strong>Genres:</strong> @string.Join(", ", film.Genres.Select(g => g.Name))</p>
                <p><strong>Release Date:</strong> @film.ReleaseDate.ToString("MMMM dd, yyyy")</p>
                <p><strong>Runtime:</strong> @film.Runtime min</p>
                <p><strong>Budget:</strong> @(film.Budget > 0 ? $"${film.Budget:N0}" : "N/A")</p>
                <p><strong>Revenue:</strong> @(film.Revenue > 0 ? $"${film.Revenue:N0}" : "N/A")</p>
                <p><strong>Production Companies:</strong> @string.Join(", ", film.ProductionCompanies.Select(g => g.Name))</p>
                <p><strong>Production Countries:</strong> @string.Join(", ", film.ProductionCountries.Select(g => g.Name))</p>
                <p><strong>Vote Average:</strong> @film.VoteAverage / 10 (Votes: @film.VoteCount)</p>
            </MudCardContent>
        </div>
    </MudCard>



    <MudContainer Class="my-4">
        <h3 class="mb-3">Cast</h3>
        @if (credits?.Cast?.Any() == true)
        {
            <MudGrid>
                @foreach (var castMember in credits.Cast.OrderBy(c => c.Order).Take(10))
                {
                    <MudItem xs="6" md="4" lg="3">
                        <MudCard Class="mud-elevation-1">
                            <MudCardMedia Image="@($"https://image.tmdb.org/t/p/w200/{castMember.ProfilePath}")"
                                          Alt="@castMember.Name"
                                          Class="mud-card-media-square"
                                          Style="border-radius: 10px; height: 200px; object-fit: cover; cursor: pointer;"
                                          @onclick="() => NavigateToPerson(castMember.Id)" />
                            <MudCardContent>
                                <p><strong>@castMember.Name</strong></p>
                                <p class="text-muted">as @castMember.Character</p>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }
        else
        {
            <p>No cast information available.</p>
        }

        <h3 class="my-4">Crew</h3>
        @if (credits?.Crew?.Any() == true)
        {
            var filteredCrew = credits.Crew
            .Where(c => c.Job == "Director" || c.Department == "Writing")
            .GroupBy(c => new { c.Id, c.Name, c.ProfilePath })
            .Select(g => new
            {
                Id = g.Key.Id,
                Name = g.Key.Name,
                ProfilePath = g.Key.ProfilePath,
                Jobs = g.Select(c => c.Job).Distinct()
            })
            .Take(3);

            if (filteredCrew.Any())
            {
                <MudGrid>
                    @foreach (var crewMember in filteredCrew)
                    {
                        <MudItem xs="6" md="4">
                            <MudCard Class="mud-elevation-1">
                                <MudCardMedia Image="@($"https://image.tmdb.org/t/p/w200/{crewMember.ProfilePath}")"
                                              Alt="@crewMember.Name"
                                              Class="mud-card-media-square"
                                              Style="border-radius: 10px; height: 200px; object-fit: cover; cursor: pointer;"
                                              @onclick="() => NavigateToPerson(crewMember.Id)" />
                                <MudCardContent>
                                    <p><strong>@crewMember.Name</strong></p>
                                    <p class="text-muted">@string.Join(", ", crewMember.Jobs)</p>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            }
            else
            {
                <p>No directors, writers, or screenwriters information available.</p>
            }
        }
        else
        {
            <p>No crew information available.</p>
        }
    </MudContainer>
}

@code {
    [Parameter]
    public int FilmId { get; set; }
    private Film? film;
    private Credits? credits;

    protected override async Task OnInitializedAsync()
    {
        film = await FilmClientService.GetFilmByIdAsync(FilmId);
        credits = await FilmClientService.GetFilmCreditsAsync(FilmId);
    }

    private void NavigateToPerson(int personId)
    {
        NavigationManager.NavigateTo($"/person/{personId}");
    }
}